document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('ocr-form');
    const errorMessage = document.getElementById('error-message');
    const loadingIndicator = document.getElementById('loading');

    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        errorMessage.style.display = 'none';
        errorMessage.textContent = '';
        loadingIndicator.style.display = 'block';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—ÉSubmit
        const submitButton = form.querySelector('button[type="submit"]');
        submitButton.disabled = true;

        const formData = new FormData(form);

        fetch('/upload', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loadingIndicator.style.display = 'none';
            submitButton.disabled = false;

            if (data.status === 'success') {
                const format = data.format;
                
                if (format === 'json') {
                    // –°–æ–∑–¥–∞–µ–º JSON blob –∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    const jsonBlob = new Blob([JSON.stringify(data.data, null, 2)], {type: 'application/json'});
                    const downloadLink = document.createElement('a');
                    downloadLink.href = URL.createObjectURL(jsonBlob);
                    downloadLink.download = 'ocr_result.json';
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                } else {
                    // –°–æ–∑–¥–∞–µ–º Markdown blob –∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    const markdownBlob = new Blob([data.markdown], {type: 'text/markdown'});
                    const downloadLink = document.createElement('a');
                    downloadLink.href = URL.createObjectURL(markdownBlob);
                    downloadLink.download = 'ocr_result.md';
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                let message = '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.';
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if (data.processing_info) {
                    const info = data.processing_info;
                    message += `\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`;
                    message += `\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${info.total_images}`;
                    if (info.fallback_used) {
                        message += `\nüîß Fallback –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: –î–∞ (${info.fallback_pages} —Å—Ç—Ä.)`;
                    }
                    if (info.embedded_images) {
                        message += `\n‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ markdown –∫–∞–∫ base64`;
                        message += `\nüßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã`;
                    }
                    message += `\nüìÑ –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: ${info.export_format}`;
                }
                
                alert(message);
            } else {
                // –û—à–∏–±–∫–∞
                errorMessage.textContent = data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                errorMessage.style.display = 'block';
            }
        })
        .catch(error => {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loadingIndicator.style.display = 'none';
            submitButton.disabled = false;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            errorMessage.textContent = '–û—à–∏–±–∫–∞: ' + error.message;
            errorMessage.style.display = 'block';
            console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', error);
        });
    });
});