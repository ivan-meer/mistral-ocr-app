#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç fallback –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
import sys
import tempfile

def test_pymupdf_import():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ PyMuPDF —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        import fitz
        print("‚úÖ PyMuPDF (fitz) —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"   –í–µ—Ä—Å–∏—è: {fitz.version}")
        return True
    except ImportError as e:
        print("‚ùå PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:")
        print(f"   –û—à–∏–±–∫–∞: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyMuPDF==1.23.26")
        return False

def test_pillow_import():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Pillow —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        from PIL import Image
        print("‚úÖ Pillow —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"   –í–µ—Ä—Å–∏—è: {Image.__version__}")
        return True
    except ImportError as e:
        print("‚ùå Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:")
        print(f"   –û—à–∏–±–∫–∞: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow==10.2.0")
        return False

def test_pdf_processing(pdf_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF"""
    if not os.path.exists(pdf_path):
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        return False
    
    try:
        import fitz
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ PDF: {pdf_path}")
        doc = fitz.open(pdf_path)
        
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –≤ PDF: {len(doc)}")
        
        total_images = 0
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            images = page.get_images()
            
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –Ω–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            total_images += len(images)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            for i, img in enumerate(images):
                xref = img[0]
                width = img[2]
                height = img[3]
                print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: {width}x{height}px (xref: {xref})")
        
        print(f"\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF: {total_images}")
        
        doc.close()
        return total_images > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
        return False

def create_test_pdf_with_image():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        import fitz
        from PIL import Image
        import io
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (200, 100), color='red')
        img_bytes = io.BytesIO()
        img.save(img_bytes, format='PNG')
        img_bytes.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        doc = fitz.open()
        page = doc.new_page()
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        rect = fitz.Rect(50, 50, 250, 150)
        page.insert_image(rect, stream=img_bytes.getvalue())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text_rect = fitz.Rect(50, 200, 500, 250)
        page.insert_text(text_rect.tl, "–¢–µ—Å—Ç–æ–≤—ã–π PDF —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º", fontsize=16)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        test_pdf_path = "test_with_image.pdf"
        doc.save(test_pdf_path)
        doc.close()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PDF: {test_pdf_path}")
        return test_pdf_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pymupdf_ok = test_pymupdf_import()
    pillow_ok = test_pillow_import()
    
    if not (pymupdf_ok and pillow_ok):
        print("\n‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
    test_pdfs = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ PDF –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for file in os.listdir('.'):
        if file.lower().endswith('.pdf'):
            test_pdfs.append(file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É uploads
    uploads_dir = 'uploads'
    if os.path.exists(uploads_dir):
        for file in os.listdir(uploads_dir):
            if file.lower().endswith('.pdf'):
                test_pdfs.append(os.path.join(uploads_dir, file))
    
    if test_pdfs:
        print(f"\nüìÅ –ù–∞–π–¥–µ–Ω—ã PDF —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for pdf in test_pdfs[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ñ–∞–π–ª–∞
            print(f"   - {pdf}")
            test_pdf_processing(pdf)
    else:
        print("\nüìÅ PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π...")
        test_pdf = create_test_pdf_with_image()
        if test_pdf:
            test_pdf_processing(test_pdf)
    
    print("\n" + "=" * 50)
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("1. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã - fallback –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("2. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("3. SVG-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ base64 –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()